<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Explosive Max</title>
  
  <subtitle>Шы ершы ыгиешеду</subtitle>
  <link href="https://artp1ay.gitbub.io/atom.xml" rel="self"/>
  
  <link href="https://artp1ay.gitbub.io/"/>
  <updated>2023-09-27T21:48:56.904Z</updated>
  <id>https://artp1ay.gitbub.io/</id>
  
  <author>
    <name>Max</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Создаем виджеты на рабочем столе в новой версии MacOS Sonoma при помощи Python</title>
    <link href="https://artp1ay.gitbub.io/2023/09/27/sonora-zabbix-widget/"/>
    <id>https://artp1ay.gitbub.io/2023/09/27/sonora-zabbix-widget/</id>
    <published>2023-09-27T19:35:55.888Z</published>
    <updated>2023-09-27T21:48:56.904Z</updated>
    
    <content type="html"><![CDATA[<p>Вот и подъехал новый функционал — виджеты на рабочем столе. Привет из Windows Vista в 2023 году:) но речь пойдет не о стратегии компании Apple заново изобретать что-то, а о вполне конкретном функционале - отображение нужной нам информации при помощи Python без единой строчки кода на Swift.</p><p>Разберемся немного, как устроена реализация виджетов в Sonoma:  теперь по сути виджеты с вашего iPhone — это общие виджеты с вашим компьютером, это значит, что все, что есть на вашем телефоне это потенциально то, что бы можем отображать прямо на рабочем столе. В виджеты теперь можно засунуть и управление домом и отображение баланса телефона и вообще все, чем владельцы iPhone привыкли пользоваться.</p><p>Для того, чтобы задуманное получилось, на нужно установить Pyto на iPhone, я точно знаю, что сама программа бесплатная, но чтобы полноценно пользоваться интерпретатором Python на iPhone придется сделать покупку в приложении, но чтобы попробовать должен быть пробный период, нам этого вполне хватит для получения опыта. Я давно купил это приложение, так как активно использую Python скрипты в автоматизации своих рутинных задач в Shortcuts. Скачиваем программу в AppStore на телефоне:<br><a href="https://apps.apple.com/ru/app/pyto-python-3/id1436650069">https://apps.apple.com/ru/app/pyto-python-3/id1436650069</a></p><h2 id="Задача"><a href="#Задача" class="headerlink" title="Задача"></a>Задача</h2><p>Чтобы периодически напоминать себе, что у меня есть не решенные проблемы в Zabbix, которые требуют моего участия, я хочу сделать виджет с отображением счетчика проблем с разбивкой на приоритеты. Как мы знаем стандартно у Zabbix есть такие severity, которые интересуют меня:   warning, average, high и disaster.<br>Для получения данных с Zabbix будем использовать его JSON RPC API модуль.</p><h2 id="Получение-данных"><a href="#Получение-данных" class="headerlink" title="Получение данных"></a>Получение данных</h2><p>Чтобы получить данные, написал такой скрипт для получения текущих проблем. Так как с зависимостями у Pyto есть определенные ограничения, если я не хочу покупать дополнительные пакеты, то буду использовать только стандартные средства Python, в данном случае <code>urllib3</code> вместо <code>requests</code>.</p><p>Скажу сразу, так как задачка на мой взгляд одноразовая, один раз сделал и забыл, то не считаю нужным сильно заботится о всех принципах для удобно поддержки, естественно в пределах разумного, код все равно будет легкочитаемым.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Отключим то, что может нас отвлекать</span></span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"><span class="comment"># обозначим переменные, с которыми будем работать</span></span><br><span class="line">ZABBIX_URL = <span class="string">&#x27;https://zabbix/api_jsonrpc.php&#x27;</span></span><br><span class="line">USER = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;password&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Здесь будем получать токен авторизации в обмен на наши учетные данные</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_to_zabbix</span>() -&gt; <span class="built_in">str</span>:</span><br><span class="line">    data_api = &#123;</span><br><span class="line">        <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;method&quot;</span>: <span class="string">&quot;user.login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;user&quot;</span>: USER,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: PASSWORD</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http = urllib3.PoolManager()</span><br><span class="line">    resp = http.request(<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                        ZABBIX_URL,</span><br><span class="line">                        headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;,</span><br><span class="line">                        body=json.dumps(data_api))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        auth_token = json.loads(resp.data.decode(<span class="string">&#x27;utf-8&#x27;</span>))[<span class="string">&#x27;result&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Unable to login, please check your credentials.&quot;</span>)</span><br><span class="line">        auth_token = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> auth_token</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Далее необходимо получить список проблем и в этой же функции сразу сделаю разбивку и подсчет событий, чтобы вернулось все в удобном словаре:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_opened_problems</span>(<span class="params">auth_token: <span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    severity_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;not classified&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;information&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;average&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;high&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;disaster&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data_api = &#123;</span><br><span class="line">        <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;method&quot;</span>: <span class="string">&quot;problem.get&quot;</span>,</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;filter&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;output&quot;</span>: <span class="string">&quot;extend&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sortfield&quot;</span>: [<span class="string">&quot;eventid&quot;</span>],</span><br><span class="line">            <span class="string">&quot;sortorder&quot;</span>: <span class="string">&quot;DESC&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;auth&quot;</span>: auth_token,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http = urllib3.PoolManager()</span><br><span class="line">    resp = http.request(<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                        ZABBIX_URL,</span><br><span class="line">                        headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;,</span><br><span class="line">                        body=json.dumps(data_api))</span><br><span class="line">    problems = json.loads(resp.data.decode(<span class="string">&#x27;utf-8&#x27;</span>))[<span class="string">&#x27;result&#x27;</span>]</span><br><span class="line">    severity_counts_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;not classified&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;information&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;warning&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;average&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;high&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;disaster&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> problem <span class="keyword">in</span> problems:</span><br><span class="line">        severity_counts_dict[severity_dict[problem[<span class="string">&#x27;severity&#x27;</span>]]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> severity_counts_dict</span><br></pre></td></tr></table></figure><p>Ну и объединю эти 2 метода в 1, чтобы после авторизации получать результат и не мешать 2 разных функции в одну изначально.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">result</span>() -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    opened_problems = &#123;&#125;</span><br><span class="line">    auth_token = login_to_zabbix()</span><br><span class="line">    <span class="keyword">if</span> auth_token:</span><br><span class="line">        opened_problems = get_opened_problems(auth_token)</span><br><span class="line">    <span class="keyword">return</span> opened_problems</span><br></pre></td></tr></table></figure><p>С этим закончили, теперь на выходе имеем удобный для дальнейшего использования словарь:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>&#x27;not classified&#x27;<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> &#x27;information&#x27;<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> &#x27;warning&#x27;<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> &#x27;average&#x27;<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> &#x27;high&#x27;<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> &#x27;disaster&#x27;<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Создание-виджета"><a href="#Создание-виджета" class="headerlink" title="Создание виджета"></a>Создание виджета</h2><p>На этом этапе не вижу смысла описывать принципы построения виджетов в Pyto, на сайте разработчика есть вполне годная документация, хотя и не полная. Сайт: <a href="https://pyto.readthedocs.io/en/latest">https://pyto.readthedocs.io/en/latest</a></p><p>Так как ранее я уже писал виджеты, то позволю себе сразу обозначить его внешний вид и сделать код более удобным, если вдруг я захочу изменить шрифт или цвета.</p><p>Код виджета лучше писать в собственной среде Pyto, если хотите сразу смотреть на то, что получилось, хоть это и не очень удобно в плане написания самого кода. Но ничего не мешает писать код где-нибудь в IDE а для просмотра просто копировать код в окно программы и запускать предпросмотр.</p><p><img src="/img/posts/pyto_interface.png" alt="Интерфейс Pyto" loading="lazy"><br>Вот так выглядит окно программы во время редактирования кода.</p><p>Итак, вернемся к дизайну, зададим фон-градиент для всего виджета и цвета для блоков каждого из значений в соответствии с его значимостью: самый серьезный — красный, самый незначительный — серый.<br>Обозначим цвета шрифтов и их размеры.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> widgets <span class="keyword">as</span> wd <span class="comment"># импортируем библиотеку</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Colors</span></span><br><span class="line">widget_background = [wd.Color.rgb(<span class="number">224</span>/<span class="number">255</span>, <span class="number">224</span>/<span class="number">255</span>, <span class="number">224</span>/<span class="number">255</span>), wd.Color.rgb(<span class="number">230</span>/<span class="number">255</span>, <span class="number">230</span>/<span class="number">255</span>, <span class="number">230</span>/<span class="number">255</span>)]</span><br><span class="line">disaster_background_color = wd.Color.rgb(<span class="number">220</span>/<span class="number">255</span>, <span class="number">71</span>/<span class="number">255</span>, <span class="number">71</span>/<span class="number">255</span>)</span><br><span class="line">high_background_color = wd.Color.rgb(<span class="number">220</span>/<span class="number">255</span>, <span class="number">136</span>/<span class="number">255</span>, <span class="number">71</span>/<span class="number">255</span>)</span><br><span class="line">warning_background_color = wd.Color.rgb(<span class="number">195</span>/<span class="number">255</span>, <span class="number">195</span>/<span class="number">255</span>, <span class="number">195</span>/<span class="number">255</span>)</span><br><span class="line">average_background_color = wd.Color.rgb(<span class="number">233</span>/<span class="number">255</span>, <span class="number">217</span>/<span class="number">255</span>, <span class="number">73</span>/<span class="number">255</span>)</span><br><span class="line">metric_box_color = wd.Color.rgb(<span class="number">255</span>/<span class="number">255</span>, <span class="number">255</span>/<span class="number">255</span>, <span class="number">255</span>/<span class="number">255</span>)</span><br><span class="line">widget_font_color = wd.Color.rgb(<span class="number">0</span>/<span class="number">255</span>, <span class="number">0</span>/<span class="number">255</span>, <span class="number">0</span>/<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sizes</span></span><br><span class="line">metric_box_padding = <span class="number">7</span></span><br><span class="line">metric_box_font_size = <span class="number">35</span></span><br><span class="line">metric_box_radius = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Texts</span></span><br><span class="line">bold_font = <span class="string">&quot;HelveticaNeue-Bold&quot;</span></span><br><span class="line">regular_font = <span class="string">&quot;HelveticaNeue-Regular&quot;</span></span><br><span class="line">widget_title = <span class="string">&quot;🚨 ZABBIX&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>На блоке выше видно, что цвета задаются в RGBA, а начертание шрифта задается через тире, причем если в названии шрифта есть пробел, то он пропускается. Само собой, чтобы шрифты корректно отображались и на десктопе и на мобильном, нужно использовать шрифты, которые есть на этих устройствах, то есть стандартные.</p><p>Далее проинициализируем основной виджет и добавим в него 4 больших блока в которые передадим результат работы нашей функции по получению данных из Zabbix</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">widget = wd.Widget()</span><br><span class="line"></span><br><span class="line">problems = result()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Все блоки со значениями</span></span><br><span class="line">disaster_count = wd.Text(</span><br><span class="line">    <span class="built_in">str</span>(problems[<span class="string">&#x27;disaster&#x27;</span>]),</span><br><span class="line">    font=wd.Font(bold_font, metric_box_font_size),</span><br><span class="line">    padding=metric_box_padding,</span><br><span class="line">    background_color=disaster_background_color,</span><br><span class="line">    color=metric_box_color,</span><br><span class="line">    corner_radius=metric_box_radius</span><br><span class="line">    )</span><br><span class="line">high_count = wd.Text(</span><br><span class="line">    <span class="built_in">str</span>(problems[<span class="string">&#x27;high&#x27;</span>]),</span><br><span class="line">    font=wd.Font(bold_font, metric_box_font_size),</span><br><span class="line">    padding=metric_box_padding,</span><br><span class="line">    background_color=high_background_color,</span><br><span class="line">    color=metric_box_color,</span><br><span class="line">    corner_radius=metric_box_radius</span><br><span class="line">    )</span><br><span class="line">average_count = wd.Text(</span><br><span class="line">    <span class="built_in">str</span>(problems[<span class="string">&#x27;average&#x27;</span>]),</span><br><span class="line">    font=wd.Font(bold_font, metric_box_font_size),</span><br><span class="line">    padding=metric_box_padding,</span><br><span class="line">    background_color=average_background_color,</span><br><span class="line">    color=metric_box_color,</span><br><span class="line">    corner_radius=metric_box_radius</span><br><span class="line">    )</span><br><span class="line">warning_count = wd.Text(</span><br><span class="line">    <span class="built_in">str</span>(problems[<span class="string">&#x27;warning&#x27;</span>]),</span><br><span class="line">    font=wd.Font(bold_font, metric_box_font_size),</span><br><span class="line">    padding=metric_box_padding,</span><br><span class="line">    background_color=warning_background_color,</span><br><span class="line">    color=metric_box_color,</span><br><span class="line">    corner_radius=metric_box_radius</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>Далее я хочу собрать виджеты. Как мы знаем есть как минимум 3 размера: малый, средний и, соответственно, большой. Вообще можно было бы ограничится только средним размером, так как буду использовать в основном его, но для демонстрации концепции сделаем все 3 размера, это не так уж и сложно.</p><p>Малый виджет будет содержать одно значение — disaster.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Small widget</span></span><br><span class="line">widget.small_layout.set_background_gradient(colors=widget_background)</span><br><span class="line">widget.small_layout.add_row(</span><br><span class="line">    [</span><br><span class="line">        wd.Text(</span><br><span class="line">            widget_title,</span><br><span class="line">            font=wd.Font(bold_font, <span class="number">18</span>),</span><br><span class="line">            color=widget_font_color,</span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">widget.small_layout.add_row(</span><br><span class="line">    [</span><br><span class="line">        disaster_count,</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line">widget.small_layout.add_row(</span><br><span class="line">    [</span><br><span class="line">        wd.Text(</span><br><span class="line">            <span class="string">&quot;Host: &quot;</span> + zabbix_host,</span><br><span class="line">            font=wd.Font(regular_font, <span class="number">11</span>),</span><br><span class="line">            color=widget_font_color,</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Основной (средний) виджет содержит все 4 значения в ряд.<br>Для него уже предусмотрим не только заголовок, но и полезную фичу, если будете использовать не один Zabbix сервер, а несколько. Выведем адрес инстанса внизу, под значениями. В этом нам поможет <code>urlparse</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">zabbix_host = urlparse(ZABBIX_URL).netloc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Medium Widget</span></span><br><span class="line">widget.medium_layout.set_background_gradient(colors=widget_background)</span><br><span class="line">widget.medium_layout.add_row(</span><br><span class="line">    [</span><br><span class="line">        wd.Text(</span><br><span class="line">            widget_title,</span><br><span class="line">            font=wd.Font(bold_font, <span class="number">18</span>),</span><br><span class="line">            color=widget_font_color,</span><br><span class="line">        ),</span><br><span class="line">        wd.Text(</span><br><span class="line">            <span class="string">&quot;Problems&quot;</span>,</span><br><span class="line">            font=wd.Font(regular_font, <span class="number">18</span>),</span><br><span class="line">            color=widget_font_color,</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">widget.medium_layout.add_row(</span><br><span class="line">    [</span><br><span class="line">        disaster_count,</span><br><span class="line">        high_count,</span><br><span class="line">        average_count,</span><br><span class="line">        warning_count,</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line">widget.medium_layout.add_row(</span><br><span class="line">    [</span><br><span class="line">        wd.Text(</span><br><span class="line">            <span class="string">&quot;Host: &quot;</span> + zabbix_host,</span><br><span class="line">            font=wd.Font(regular_font, <span class="number">11</span>),</span><br><span class="line">            color=widget_font_color,</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>И наконец сделаем самый большой виджет. так как он квадратный, то логичнее всего разбить ряд значений на два, тогда это все впишется в квадрат.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Large Widget</span></span><br><span class="line">widget.large_layout.set_background_gradient(colors=widget_background)</span><br><span class="line">widget.large_layout.add_row(</span><br><span class="line">    [</span><br><span class="line">        wd.Text(</span><br><span class="line">            widget_title,</span><br><span class="line">            font=wd.Font(bold_font, <span class="number">18</span>),</span><br><span class="line">            color=widget_font_color,</span><br><span class="line">        ),</span><br><span class="line">        wd.Text(</span><br><span class="line">            <span class="string">&quot;Problems&quot;</span>,</span><br><span class="line">            font=wd.Font(regular_font, <span class="number">18</span>),</span><br><span class="line">            color=widget_font_color,</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">widget.large_layout.add_row(</span><br><span class="line">    [</span><br><span class="line">        disaster_count,</span><br><span class="line">        high_count,</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line">widget.large_layout.add_row(</span><br><span class="line">    [</span><br><span class="line">        average_count,</span><br><span class="line">        warning_count,</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line">widget.large_layout.add_row(</span><br><span class="line">    [</span><br><span class="line">        wd.Text(</span><br><span class="line">            <span class="string">&quot;Host: &quot;</span> + zabbix_host,</span><br><span class="line">            font=wd.Font(regular_font, <span class="number">11</span>),</span><br><span class="line">            color=widget_font_color,</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>В самом конце зададим название виджету и сделаем так, что бы он периодически обновлялся в фоне. Я сделаю обновление раз в минуту, но возможно так часто не нужно, так как все же это не система уведомлений, а просто символическая напоминалка, что есть незавершенные дела.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wd.save_widget(widget, <span class="string">&quot;Zabbix&quot;</span>)</span><br><span class="line">wd.schedule_next_reload(timedelta(minutes=<span class="number">1</span>))</span><br><span class="line">wd.show_widget(widget)</span><br></pre></td></tr></table></figure><p>На этом этапе можно запустить и посмотреть как это работает, но есть нюанс, куда же без него :) Если вы вели разработку на десктопе, то, чтобы добавить виджет так же на десктоп необходимо единоразово проинициализировать виджет на iPhone, иначе просто не увидите его в списке.</p><p>Вот так оно выглядит у меня на мобильном устройстве в режиме предпросмотра:</p><p><img src="/img/posts/zbx_all_widgets.PNG" alt="Предпросмотр готовых виджетов в Pyto" loading="lazy"></p><p>А так, на экране приложений. Странно, но размеры отступов в предпросмотре и рабочий вариант  отличаются.</p><p><img src="/img/posts/zbx_home_widget.PNG" alt="Результат на домашнем экране iOS" loading="lazy"></p><p>А собственно так выглядит виджет уже на десктопе</p><p><img src="/img/posts/zbx_widget_desktop.png" alt="Результат на рабочем столе MacOS Sonoma" loading="lazy"></p><p>В общем-то ради него все изначально и затевалось.</p><p>Если вдруг захотите реализовать такое у себя, то полный код виджета можно найти у меня в GitHub: <a href="https://github.com/artp1ay/zabbix_pyto_widget">https://github.com/artp1ay/zabbix_pyto_widget</a></p>]]></content>
    
    
    <summary type="html">Вот и подъехал новый функционал — виджеты на рабочем столе. Привет из Windows Vista в 2023 году:) но речь пойдет не о стратегии компании Apple заново изобретать что-то, а о вполне конкретном функционале - отображение нужной нам информации при помощи Python без единой строчки кода на Swift.</summary>
    
    
    
    <category term="Скрипты" scheme="https://artp1ay.gitbub.io/categories/%D0%A1%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B/"/>
    
    
    <category term="MacOS" scheme="https://artp1ay.gitbub.io/tags/MacOS/"/>
    
    <category term="Zabbix" scheme="https://artp1ay.gitbub.io/tags/Zabbix/"/>
    
  </entry>
  
</feed>
